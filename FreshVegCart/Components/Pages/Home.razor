@page "/"

@inject IProductApi productApi
@inject AppState appState
@inject AuthState authState
@inject CartService cartService
@inject HandlerService handlerService
<SectionContent SectionName="pageTitle">Home</SectionContent>
@if (!authState.IsLoggedIn)
{
    <SectionContent SectionName="toolbarItems">
        <NavLink href="/login" class="btn-app">Login</NavLink>
    </SectionContent>
}
<div class="container-fluid">
    <div class="row" style="margin-bottom: calc(var(--menubar-height));">
        @foreach(var p in _products)
        {
            <div class="col-12 mb-1 bg-white p-2 d-flex shadow gap-1">
                <div class="img-container shadow">
                    <img src="@p.ImageUrl" class="img-fluid" alt="@p.Name" />
                </div>
                <div class="product-info">
                    <label class="product-name d-block fw-bold h5">@p.Name</label>
                    <label class="product-price d-block mt-2">@p.Price.ToString("c")/@p.Unit</label>
                    @* <button type="button" class="btn-app mt-2">Add to Cart</button> *@
                    <div class="mt-2">
                        <CartButton Product="@p" />
                    </div>
                </div>
            </div>
        }
    </div>
</div>
@code{
    ProductDto[] _products = [];
    protected override async Task OnInitializedAsync()
    {
        await handlerService.CallApiAsync(async () =>
        {
            _products = await productApi.GetProductsAsync();
            foreach(var item in cartService.Items)
            {
                var product = _products.FirstOrDefault(p => p.Id == item.ProductId);
                if(product is not null)
                {
                    product.Quantity = item.Quantity;
                }
            }
        });
    }
}

<style>
    .img-container{
        border-radius: 20px;
        width:100px;
        padding:5px;
    }

    .img-fluid{
        width:100%;
        height: 100%;
    }
</style>