@inject IUserApi userApi
@inject AuthState authState
@inject HandlerService handlerService
<EditForm Model="_model" OnValidSubmit="UpdateProfileAsync">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" placeholder="Enter Name" @bind-Value="_model.Name" />
        <ValidationMessage For="@(() => _model.Name)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label class="form-label">Mobile No</label>
        <InputText class="form-control" placeholder="Enter Mobile No" @bind-Value="_model.Mobile" />
        <ValidationMessage For="@(() => _model.Mobile)" class="text-danger" />
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-app">Change Password</button>
    </div>
</EditForm>

@code {
    private UpdateProfileDto _model = new();

    [Parameter, EditorRequired]
    public EventCallback OnSaved { get; set; }
    protected override void OnInitialized()
    {
        if (authState.User != null)
        {
            _model.Name = authState.User.Name;
            _model.Mobile = authState.User.Mobile;
        }
    }
    private async Task UpdateProfileAsync()
    {
        await handlerService.CallApiAsync(async () =>
        {
            var apiResult = await userApi.UpdateProfileAsync(_model);
            if (!apiResult.IsSuccess)
            {
                await MauiInterop.AlertAsync(apiResult.Error, "Error");
                return;
            }
            await MauiInterop.ShowToastAsync("Profile Updated Successfully");

            var updatedUser = apiResult.Data;
            authState.Login(updatedUser);

            await OnSaved.InvokeAsync();
        });
        
    }
}
