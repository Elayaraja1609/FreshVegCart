@inject IUserApi userApi
@inject HandlerService handlerService

<EditForm Model="Model" OnValidSubmit="SaveAddressAsync">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" placeholder="Enter Name" @bind-Value="Model.Name" />
        <ValidationMessage For="@(() => Model.Name)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label class="form-label">Address</label>
        <InputText class="form-control" placeholder="Enter Mobile No" @bind-Value="Model.Address" />
        <ValidationMessage For="@(() => Model.Address)" class="text-danger" />
    </div>
    <div class="mb-3">
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckChecked" @bind-value="Model.IsDefault">
            <label class="form-check-label" for="flexSwitchCheckChecked">Is Default Address ?</label>
        </div>
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-app">Change Password</button>
    </div>
</EditForm>

@code {
    [Parameter,EditorRequired]
    public AddressDto Model { get; set; }

    [Parameter, EditorRequired]
    public EventCallback OnSaved { get; set; }

    private async Task SaveAddressAsync()
    {
        await handlerService.CallApiAsync(async () =>
        {
            var apiResult = await userApi.SaveAddressAsync(Model);
            if (!apiResult.IsSuccess)
            {
                await MauiInterop.AlertAsync(apiResult.Error, "Error");
                return;
            }
            await MauiInterop.ShowToastAsync("Address Updated Successfully");

            await OnSaved.InvokeAsync();
        });
        
    }
}
