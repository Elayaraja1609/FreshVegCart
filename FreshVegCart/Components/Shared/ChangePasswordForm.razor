@inject IUserApi userApi
@inject HandlerService handlerService

<EditForm Model="_model" OnValidSubmit="ChangePasswordAsync">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label class="form-label">Current Password</label>
        <InputText type="password" class="form-control" placeholder="Enter current password" @bind-Value="_model.CurrentPassword" />
        <ValidationMessage For="@(() => _model.CurrentPassword)" class="text-danger"/>
    </div>
    <div class="mb-3">
        <label class="form-label">New Password</label>
        <InputText type="password" class="form-control" placeholder="Enter new password" @bind-Value="_model.NewPassword" />
        <ValidationMessage For="@(() => _model.NewPassword)" class="text-danger" />
    </div>
    <div class="mb-3">
        <label class="form-label">Confirm New Password</label>
        <InputText type="password" class="form-control" placeholder="Confirm new password" @bind-Value="_model.ConfirmNewPassword" />
        <ValidationMessage For="@(() => _model.ConfirmNewPassword)" class="text-danger" />
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-app">Change Password</button>
    </div>
</EditForm>

@code {
    private ChangePasswordDto _model = new();

    [Parameter, EditorRequired]
    public EventCallback OnSaved { get; set; }
    private async Task ChangePasswordAsync()
    {
        await handlerService.CallApiAsync(async()=>
        {
            var apiResult = await userApi.ChangePasswordAsync(_model);
            if (!apiResult.IsSuccess)
            {
                await MauiInterop.AlertAsync(apiResult.Error, "Error");
                return;
            }
            await MauiInterop.ShowToastAsync("Password Changed Successfully");
            await OnSaved.InvokeAsync();
        });
        
    }
}
